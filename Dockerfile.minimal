# Ultra-minimal Docker build for smallest possible image
FROM mcr.microsoft.com/dotnet/sdk:9.0-alpine AS build
WORKDIR /src
COPY backend/backend.csproj .
RUN dotnet restore -r linux-musl-x64
COPY backend/ .

# Replace with minimal HTML/JS
RUN rm wwwroot/index.html wwwroot/app.js
COPY backend/wwwroot/index-minimal.html wwwroot/index.html
COPY backend/wwwroot/app-minimal.js wwwroot/app.js

# Ultra-optimized publish
RUN dotnet publish -c Release -r linux-musl-x64 -o /app \
    --self-contained true \
    --no-restore \
    -p:PublishReadyToRun=false \
    -p:PublishSingleFile=true \
    -p:PublishTrimmed=true \
    -p:TrimMode=full \
    -p:SuppressTrimAnalysisWarnings=true \
    -p:EnableCompressionInSingleFile=true \
    -p:DebuggerSupport=false \
    -p:EnableUnsafeUTF7Encoding=false \
    -p:HttpActivityPropagationSupport=false \
    -p:MetadataUpdaterSupport=false \
    -p:UseNativeHttpHandler=true \
    -p:EventSourceSupport=false \
    -p:UseSystemResourceKeys=true \
    -p:IlcDisableReflection=true \
    -p:IlcOptimizationPreference=Size \
    -p:IlcFoldIdenticalMethodBodies=true \
    -p:StripSymbols=true

# Use distroless image for minimal runtime
FROM gcr.io/distroless/base-debian12
WORKDIR /app
COPY --from=build /app/backend .
EXPOSE 8080
ENV ASPNETCORE_URLS=http://+:8080
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
ENTRYPOINT ["./backend"]